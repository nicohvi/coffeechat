// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var $chatPage, $input, $loginPage, $messageInput, $messages, $username, COLORS, FADE_TIMER, TYPING_TIMER, addChatMessage, addMessageElement, addSystemMessage, addUser, cleanInput, connected, lastTypingTime, removeTypingMessages, sendMessage, socket, typing, updateTyping, username;
    TYPING_TIMER = 1000;
    FADE_TIMER = 2000;
    COLORS = ['#e21400', '#91580f', '#f8a700', '#f78b00', '#58dc00', '#287b00', '#a8f07a', '#4ae8c4', '#3b88eb', '#3824aa', '#a700ff', '#d300e7'];
    connected = false;
    username = null;
    socket = io();
    typing = false;
    lastTypingTime = null;
    $loginPage = $('.login');
    $chatPage = $('.chat');
    $messages = $('.messages');
    $username = $('.username-input');
    $messageInput = $('.new-message');
    $input = $username.focus();
    addUser = function() {
      username = cleanInput($username.val().trim());
      if (username) {
        return socket.emit('add user', username);
      }
    };
    sendMessage = function() {
      var message;
      message = cleanInput($input.val().trim());
      if (message && connected) {
        $input.val('');
        addChatMessage(message, {
          username: username
        });
        typing = false;
        return socket.emit('new message', message);
      }
    };
    cleanInput = function(input) {
      return $('<div/>').text(input).text();
    };
    addChatMessage = function(message, options) {
      var $messageBodyEl, $messageEl, $userEl;
      if (options == null) {
        options = {};
      }
      $userEl = $('<span class="username" />').text(options.username);
      $messageBodyEl = $('<span class="message-body" />').text(message);
      $messageEl = $('<li class="message" />').data('username', options.username).append($userEl, $messageBodyEl);
      return addMessageElement($messageEl, options);
    };
    updateTyping = function() {
      if (!typing) {
        typing = true;
        socket.emit('typing');
      }
      lastTypingTime = new Date().getTime();
      return setTimeout(function() {
        var now, offset;
        now = new Date().getTime();
        offset = now - lastTypingTime;
        if (offset >= TYPING_TIMER && typing) {
          socket.emit('stop typing');
          return typing = false;
        }
      }, TYPING_TIMER);
    };
    $(this).keydown(function(event) {
      if (event.which === 13) {
        if (username != null) {
          return sendMessage();
        } else {
          return addUser();
        }
      }
    });
    $chatPage.on('click', function(event) {
      return $input.focus();
    });
    $loginPage.on('click', function(event) {
      return $input.focus();
    });
    $messageInput.on('input', function() {
      if (!connected) {
        return;
      }
      return updateTyping();
    });
    addSystemMessage = function(message, options) {
      var $messageBodyEl, $messageEl, typingClass;
      if (options == null) {
        options = {};
      }
      if (options.typing != null) {
        typingClass = "typing";
      } else {
        typingClass = "";
      }
      $messageBodyEl = $('<span class="message-body" />').text(message);
      $messageEl = $("<li class=\"message system " + typingClass + "\" />").append($messageBodyEl);
      if (options.username != null) {
        $messageEl.data('username', options.username);
      }
      return addMessageElement($messageEl, options);
    };
    addMessageElement = function($el, options) {
      if (options == null) {
        options = {};
      }
      if (options.username != null) {
        removeTypingMessages(options.username);
      }
      if (options.prepend != null) {
        $messages.prepend($el);
      } else {
        $messages.append($el);
      }
      if (options.fade != null) {
        setTimeout(function() {
          return $el.remove();
        }, FADE_TIMER);
      }
      return $messages[0].scrollTop = $messages[0].scrollHeight;
    };
    removeTypingMessages = function(username) {
      var $typingMessages;
      $typingMessages = $('.system.typing').filter(function(i) {
        return $(this).data('username') === username;
      });
      return $typingMessages.remove();
    };
    socket.on('used name', function() {
      var $errorEl, error;
      username = null;
      error = "Username already in use, bruv.";
      $errorEl = $('<div class="notice"/>').text(error);
      $('.form').prepend($errorEl);
      return $input.addClass('error');
    });
    socket.on('login', function(data) {
      var message;
      connected = true;
      $loginPage.fadeOut();
      $chatPage.show();
      $loginPage.off('click');
      $input = $messageInput.focus();
      message = "Welcome to Coffeechat, " + data.username + ".";
      return addSystemMessage(message, {
        prepend: true
      });
    });
    socket.on('user joined', function(data) {
      var message;
      if (!connected) {
        return;
      }
      message = "" + data.username + " has joined the chat. Total user count: " + data.numUsers + ".";
      return addSystemMessage(message);
    });
    socket.on('new message', function(data) {
      var message;
      if (!connected) {
        return;
      }
      message = data.message;
      return addChatMessage(message, {
        username: data.username
      });
    });
    socket.on('typing', function(data) {
      var message;
      if (!(connected || data.username === username)) {
        return;
      }
      message = "" + data.username + " is typing, if you start typing as well he might stop.";
      return addSystemMessage(message, {
        username: data.username,
        typing: true
      });
    });
    socket.on('stop typing', function(data) {
      var message;
      if (!(connected || data.username === username)) {
        return;
      }
      message = "" + data.username + " has stopped typing, he probably regrets what he wanted to say - awkward.";
      return addSystemMessage(message, {
        fade: true,
        typing: true,
        username: data.username
      });
    });
    return socket.on('user left', function(data) {
      var message;
      if (!connected) {
        return;
      }
      message = "" + data.username + " has made like Elvis and left the building. Total user count: " + data.numUsers + ".";
      return addSystemMessage(message);
    });
  });

}).call(this);
