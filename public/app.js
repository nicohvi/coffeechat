// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var $chatPage, $input, $loginPage, $messageInput, $messages, $username, addChatMessage, addMessageElement, addSystemMessage, addUser, cleanInput, connected, sendMessage, socket, username;
    connected = false;
    username = null;
    socket = io();
    $loginPage = $('.login');
    $chatPage = $('.chat');
    $messages = $('.messages');
    $username = $('.username-input');
    $messageInput = $('.new-message');
    $input = $username.focus();
    addUser = function() {
      username = cleanInput($username.val().trim());
      if (username) {
        return socket.emit('add user', username);
      }
    };
    sendMessage = function() {
      var message;
      message = cleanInput($input.val().trim());
      if (message && connected) {
        $input.val('');
        addChatMessage({
          username: username,
          message: message
        });
        return socket.emit('new message', message);
      }
    };
    cleanInput = function(input) {
      return $('<div/>').text(input).text();
    };
    addChatMessage = function(data, options) {
      var $messageBodyEl, $messageEl, $userEl;
      $userEl = $('<span class="username" />').text(data.username);
      $messageBodyEl = $('<span class="message-body" />').text(data.message);
      $messageEl = $('<li class="message" />').data('username', data.username).append($userEl, $messageBodyEl);
      return addMessageElement($messageEl, options);
    };
    $(this).keydown(function(event) {
      if (event.which === 13) {
        if (username != null) {
          return sendMessage();
        } else {
          return addUser();
        }
      }
    });
    $chatPage.on('click', function(event) {
      return $input.focus();
    });
    addSystemMessage = function(message, options) {
      var $messageBodyEl, $messageEl;
      $messageBodyEl = $('<span class="message-body" />').text(message);
      $messageEl = $('<li class="message system"/>').append($messageBodyEl);
      return addMessageElement($messageEl, options);
    };
    addMessageElement = function($el, options) {
      if (options == null) {
        options = {};
      }
      if (options.prepend) {
        $messages.prepend($el);
      } else {
        $messages.append($el);
      }
      return $messages[0].scrollTop = $messages[0].scrollHeight;
    };
    socket.on('used name', function() {
      var $errorEl, error;
      username = null;
      error = "Username already in use, bruv.";
      $errorEl = $('<div class="notice"/>').text(error);
      $('.form').prepend($errorEl);
      return $input.addClass('error');
    });
    socket.on('login', function(data) {
      var message;
      connected = true;
      $loginPage.fadeOut();
      $chatPage.show();
      $loginPage.off('click');
      $input = $messageInput.focus();
      message = "Welcome to Coffeechat, " + data.username + ".";
      return addSystemMessage(message, {
        prepend: true
      });
    });
    socket.on('user joined', function(data) {
      var message;
      if (!connected) {
        return;
      }
      message = "" + data.username + " has joined the chat. Total user count: " + data.numUsers + ".";
      return addSystemMessage(message);
    });
    socket.on('new message', function(data) {
      return addChatMessage(data);
    });
    return socket.on('user left', function(data) {
      var message;
      if (!connected) {
        return;
      }
      message = "" + data.username + " has made like Elvis and left the building. Total user count: " + data.numUsers + ".";
      return addSystemMessage(message);
    });
  });

}).call(this);
