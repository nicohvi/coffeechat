// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var $chatPage, $input, $loginPage, $messageInput, $messages, $username, COLORS, FADE_TIME, TYPING_TIMER, addChatMessage, addMessageElement, addParticipantsMessage, addTypingMessage, addUser, cleanInput, connect, connected, getTypingMessages, getUsernameColor, lastTypingTime, log, removeTypingMessage, sendMessage, socket, typing, updateTyping, username;
    TYPING_TIMER = 1000;
    FADE_TIME = 150;
    COLORS = ['#e21400', '#91580f', '#f8a700', '#f78b00', '#58dc00', '#287b00', '#a8f07a', '#4ae8c4', '#3b88eb', '#3824aa', '#a700ff', '#d300e7'];
    connected = false;
    username = null;
    socket = io();
    typing = false;
    lastTypingTime = null;
    $loginPage = $('.login');
    $chatPage = $('.chat');
    $messages = $('.messages');
    $username = $('.username-input');
    $messageInput = $('.new-message');
    $input = $username.focus();
    addUser = function() {
      username = cleanInput($username.val().trim());
      if (username) {
        return socket.emit('add user', username);
      }
    };
    connect = function() {
      connected = true;
      $loginPage.fadeOut();
      $chatPage.show();
      $loginPage.off('click');
      return $input = $messageInput.focus();
    };
    sendMessage = function() {
      var message;
      message = cleanInput($input.val().trim());
      if (message && connected) {
        $input.val('');
        addChatMessage({
          username: username,
          message: message
        });
        return socket.emit('new message', message);
      }
    };
    cleanInput = function(input) {
      return $('<div/>').text(input).text();
    };
    addParticipantsMessage = function(data) {
      var message;
      if (data.numUsers === 1) {
        message = 'There\'s 1 participant.';
      } else {
        message = "There are " + data.numUsers + " participants.";
      }
      return log(message);
    };
    log = function(message, options) {
      var $el;
      $el = $('<li class="log" />').text(message);
      return addMessageElement($el, options);
    };
    addChatMessage = function(data, options) {
      var $messageBodyEl, $messageEl, $userEl, typingClass;
      if (options == null) {
        options = {};
      }
      if (getTypingMessages(data).length > 0) {
        options.fade = false;
      }
      $userEl = $('<span class="username" />').text(data.username).css('color', getUsernameColor(data.username));
      $messageBodyEl = $('<span class="message-body" />').text(data.message);
      if (data.typing) {
        typingClass = 'typing';
      } else {
        typingClass = '';
      }
      $messageEl = $('<li class="message" />').data('username', data.username).addClass(typingClass).append($userEl, $messageBodyEl);
      return addMessageElement($messageEl, options);
    };
    addTypingMessage = function(data) {
      data.typing = true;
      data.message = ' is typing. If you write something, he might stop.';
      return addChatMessage(data);
    };
    removeTypingMessage = function(data) {
      return getTypingMessages(data).fadeOut(function() {
        return $(this).remove();
      });
    };
    addMessageElement = function($el, options) {
      if (options == null) {
        options = {};
      }
      if (options.fade == null) {
        options.fade = true;
      }
      if (options.prepend == null) {
        options.prepend = false;
      }
      if (options.fade) {
        $el.hide().fadeIn(FADE_TIME);
      }
      if (options.prepend) {
        $messages.prepend($el);
      } else {
        $messages.append($el);
      }
      return $messages[0].scrollTop = $messages[0].scrollHeight;
    };
    updateTyping = function() {
      if (!connected) {
        return;
      }
      if (!typing) {
        typing = true;
        socket.emit('typing');
      }
      lastTypingTime = new Date().getTime();
      return setTimeout(function() {
        var now, offset;
        now = new Date().getTime();
        offset = now - lastTypingTime;
        if (offset >= TYPING_TIMER && typing) {
          socket.emit('stop typing');
          return typing = false;
        }
      }, TYPING_TIMER);
    };
    getTypingMessages = function(data) {
      return $('.typing.message').filter(function() {
        return $(this).data('username') === data.username;
      });
    };
    getUsernameColor = function(username) {
      var hash, i, index, letter, _i, _len;
      hash = 7;
      for (i = _i = 0, _len = username.length; _i < _len; i = ++_i) {
        letter = username[i];
        hash = username.charCodeAt(i) + (hash << 5) - hash;
      }
      index = Math.abs(hash % COLORS.length);
      return COLORS[index];
    };
    $(this).keydown(function(event) {
      $input.focus();
      if (event.which === 13) {
        if (connected) {
          sendMessage();
          typing = false;
          return socket.emit('stop typing');
        } else {
          return addUser();
        }
      }
    });
    $chatPage.on('click', function(event) {
      return $input.focus();
    });
    $loginPage.on('click', function(event) {
      return $input.focus();
    });
    $messageInput.on('input', function() {
      return updateTyping();
    });
    socket.on('used name', function() {
      var $errorEl;
      $errorEl = $('<div class="notice"/>').text("Username already in use, bruv.");
      return $('.form').prepend($errorEl);
    });
    socket.on('login', function(data) {
      var message;
      connect();
      message = "Welcome to Coffeechat, " + data.username + ".";
      log(message, {
        prepend: true
      });
      return addParticipantsMessage(data);
    });
    socket.on('user joined', function(data) {
      if (data.username === username) {
        return;
      }
      log("" + data.username + " has joined the chat.");
      return addParticipantsMessage(data);
    });
    socket.on('new message', function(data) {
      return addChatMessage(data);
    });
    socket.on('typing', function(data) {
      return addTypingMessage(data);
    });
    socket.on('stop typing', function(data) {
      return removeTypingMessage(data);
    });
    return socket.on('user left', function(data) {
      log("" + data.username + " has made like Elvis.");
      addParticipantsMessage(data);
      return removeChatTyping(data);
    });
  });

}).call(this);
